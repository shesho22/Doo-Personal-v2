package com.sergio;

import java.util.Random;
import java.util.Scanner;

public class Juego {
    private Jugador jugador1;
    private Jugador jugador2;
    private Tablero tablero;
    private Jugador jugadorActual;
    private boolean esModoMaquina;

    public Juego(Jugador jugador1, Jugador jugador2, Tablero tablero, boolean esModoMaquina) {
        this.jugador1 = jugador1;
        this.jugador2 = jugador2;
        this.tablero = tablero;
        this.esModoMaquina = esModoMaquina;
        jugadorActual = jugador1;
    }

    public void jugar() {
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();
        boolean juegoTerminado = false;
        int fila, columna;

        while (!juegoTerminado) {
            tablero.mostrar();

            if (jugadorActual.esMaquina() && esModoMaquina) {
                System.out.println("Turno de la máquina: ");
                fila = random.nextInt(3);
                columna = random.nextInt(3);
            } else {
                System.out.println("Turno de " + jugadorActual.obtenerSimbolo() + ": ");
                System.out.print("Fila: ");
                fila = scanner.nextInt();
                System.out.print("Columna: ");
                columna = scanner.nextInt();
            }

            if (!tablero.estaVacia(fila, columna)) {
                System.out.println("La celda ya está ocupada. Intente de nuevo.");
                continue;
            }

            jugadorActual.jugar(tablero, fila, columna);

            if (hayGanador()) {
                juegoTerminado = true;
                System.out.println("¡El jugador " + jugadorActual.obtenerSimbolo() + " ha ganado!");
            } else if (hayEmpate()) {
                juegoTerminado = true;
                System.out.println("El juego ha terminado en empate.");
            } else {
                cambiarJugador();
            }
        }

        tablero.mostrar();
    }

    private boolean hayGanador() {
        // Verificar si hay un ganador en alguna de las filas
        for (int i = 0; i < 3; i++) {
            if (!tablero.estaVacia(i, 0) && tablero.obtenerValor(i, 0).equals(tablero.obtenerValor(i, 1))
                    && tablero.obtenerValor(i, 1).equals(tablero.obtenerValor(i, 2))) {
                return true;
            }
        }

        // Verificar si hay un ganador en alguna de las columnas
        for (int j = 0; j < 3; j++) {
            if (!tablero.estaVacia(0, j) && tablero.obtenerValor(0, j).equals(tablero.obtenerValor(1, j))
                    && tablero.obtenerValor(1, j).equals(tablero.obtenerValor(2, j))) {
                return true;
            }
        }

        // Verificar si hay un ganador en alguna de las diagonales
        if (!tablero.estaVacia(1, 1)
                && ((tablero.obtenerValor(0, 0).equals(tablero.obtenerValor(1, 1))
                        && tablero.obtenerValor(1, 1).equals(tablero.obtenerValor(2, 2)))
                        || (tablero.obtenerValor(0, 2).equals(tablero.obtenerValor(1, 1))
                                && tablero.obtenerValor(1, 1).equals(tablero.obtenerValor(2, 0))))) {
            return true;
        }

        return false;
    }

    private boolean hayEmpate() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (tablero.estaVacia(i, j)) {
                    return false;
                }
            }
        }
        return true;
    }

    private void cambiarJugador() {
        if (jugadorActual == jugador1) {
            jugadorActual = jugador2;
        } else {
            jugadorActual = jugador1;
        }
    }

    public void reiniciar() {
        tablero.limpiar();
        jugadorActual = jugador1;
    }
}
